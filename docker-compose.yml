version: "3.3"
services:

  # web-server:
  #   build:
  #     dockerfile: php.Dockerfile
  #     context: .
  #   restart: always
  #   volumes:
  #     - "./src/:/var/www/html/"
  #   ports:
  #     - "8080:80"

  # api:
  #   build:
  #     dockerfile: php.Dockerfile
  #     context: .
  #   restart: always
  #   volumes:
  #     - "./src/api/:/var/www/html"
  #   ports:
  #     - "5000:80"

  # frontend:
  #   build:
  #     dockerfile: php.Dockerfile
  #     context: .
  #   restart: always
  #   volumes:
  #     - "./frontend/:/var/www/html"
  #   ports:
  #     - "8000:80"
  frontend:
    build:
      dockerfile: php.Dockerfile
      context: .
    restart: always
    volumes:
      - "./frontend/:/var/www/html/"
    ports:
      - "7000:80"
  admin:
    build:
      dockerfile: php.Dockerfile
      context: .
    restart: always
    volumes:
      - "./admin/:/var/www/html/"
    ports:
      - "5000:80"

  app:
    build:
      dockerfile: php.Dockerfile
      context: .
    restart: always
    volumes:
      - "./app/:/var/www/html/"
    ports:
      - "3000:80"


  mongo:
    container_name: mongo
    image: mongo:4.4
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password123
    ports:
      - "27017:27017"
  # mysql-server:
  #   image: mysql:8.0.19
  #   restart: always
  #   environment:
  #     MYSQL_ROOT_PASSWORD: secret
  #   volumes:
  #     - mysql-data:/var/lib/mysql

  # phpmyadmin:
  #   image: phpmyadmin/phpmyadmin:5.0.1
  #   restart: always
  #   environment:
  #     PMA_HOST: mysql-server
  #     PMA_USER: root
  #     PMA_PASSWORD: secret
  #   ports:
  #     - "5000:80"
volumes:
  mysql-data:
